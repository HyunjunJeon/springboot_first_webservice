1. Spring Boot 만나보기

2. Spring Boot로 DB접근 해보기 + Time 주입 ( DB 에서 하지말고 애플리케이션 단에서 )

3. 화면 만들어보기
    Handlebars는 흔히 사용하시는 Freemarker, Velocity와 같은 서버 템플릿 엔진입니다.
    JSP는 서버 템플릿 역할만 하지 않기 때문에 JSP와 완전히 똑같은 역할을 한다고 볼순 없지만, 순수하게 JSP를 View 용으로만 사용하실때는 똑같은 역할이라고 보시면 됩니다.

    결국 URL 요청시, 파라미터와 상태에 맞춰 적절한 HTML 화면을 생성해 전달하는 역할을 하는것으로 보시면 됩니다.

    Tip)
    JSP, Freemarker, Velocity가 몇년동안 업데이트가 안되고 있어 사실상 SpringBoot에선 권장하지 않는 템플릿엔진입니다.
    (Freemarker는 프리뷰버전은 계속나오고 있는데 릴리즈버전이 2015년이 마지막입니다.)
    현재까지도 꾸준하게 업데이트 되고 있는 템플릿 엔진은 Thymeleaf, Handlebars 이며 이 중 하나를 선택하시면 됩니다.
    개인적으로는 Handlebars를 추천합니다.
    (Spring 진영에선 Thymeleaf를 밀고 있습니다.)

    (1) 문법이 다른 템플릿엔진보다 간단하고
    (2) 로직 코드를 사용할 수 없어 View의 역할과 서버의 역할을 명확하게 제한할 수 있으며
    (3) Handlebars.js와 Handlebars.java 2가지가 다 있어, 하나의 문법으로 클라이언트 템플릿/서버 템플릿을 모두 사용할 수 있습니다.

    개인적으로 View 템플릿엔진은 View의 역할에만 충실하면 된다고 생각합니다.
    너무 많은 기능을 제공하면 API와 View템플릿엔진, JS가 서로 로직을 나눠갖게 되어 유지보수하기가 굉장히 어렵습니다

    의존성 하나만 추가하면 기존에 다른 스타터 패키지와 마찬가지로 추가 설정없이 설치가 끝입니다.
    다른 서버 템플릿 스타터 패키지와 마찬가지로 Handlebars도 기본 경로는 src/main/resources/templates가 됩니다.

    Tip)
    스프링부트는 디폴트 설정이 굉장히 많습니다.
    기존의 스프링처럼 개인이 하나하나 설정 코드를 다 작성할 필요가 없습니다.
    스프링부트를 쓰면 많은 설정을 생략할 수 있습니다.
    영상을 참고하셔서 이런 점들은 숙지하시면 좋을것 같습니다.


